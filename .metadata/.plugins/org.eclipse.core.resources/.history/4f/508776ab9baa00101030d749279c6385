package com.example.data.security;

import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import jakarta.servlet.*;
import jakarta.servlet.http.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.security.Key;

/**
 * This filter intercepts every request to the Data Service API
 * and checks for a valid JWT token in the Authorization header.
 */
@Component
public class JwtFilter implements Filter {

    @Value("${app.jwt.secret}")
    private String jwtSecret; // must match the secret used in account-service

    @Value("${app.internal.secret}")
    private String internalSecret; // allows internal bypass from account-service

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {

        HttpServletRequest req = (HttpServletRequest) request;
        HttpServletResponse res = (HttpServletResponse) response;
        String path = req.getRequestURI();

        // Allow root health check (/api)
        if (path.equals(req.getContextPath() + "/") || path.equals(req.getContextPath())) {
            chain.doFilter(request, response);
            return;
        }

        // Allow internal requests from account-service (register calls)
        String internalHeader = req.getHeader("X-Internal-Secret");
        if (internalHeader != null && internalHeader.equals(internalSecret)) {
            chain.doFilter(request, response);
            return;
        }

        // Validate Authorization header
        String authHeader = req.getHeader("Authorization");
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            res.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            res.getWriter().write("Missing or invalid Authorization header");
            return;
        }

        String token = authHeader.substring(7);
        try {
            Key key = Keys.hmacShaKeyFor(jwtSecret.getBytes(StandardCharsets.UTF_8));
            Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(token);
            chain.doFilter(request, response);
        } catch (ExpiredJwtException e) {
            res.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            res.getWriter().write("Token expired");
        } catch (JwtException e) {
            res.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            res.getWriter().write("Invalid token");
        }
    }
}